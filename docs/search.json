[
  {
    "objectID": "R/biolog_ecoplates/02_plot_analyze_growth.html",
    "href": "R/biolog_ecoplates/02_plot_analyze_growth.html",
    "title": "Analyzing monoculture growth summary",
    "section": "",
    "text": "1 Setup\n\n\nShow/hide code\n##### Libraries\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nlibrary(errors)\nsource(here::here(\"R\", \"utils_gcurves.R\"))\n\n##### Global variabless\ndata_raw &lt;- here::here(\"_data_raw\", \"biolog_ecoplates\")\ndata &lt;- here::here(\"data\", \"biolog_ecoplates\")\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n2 Introduction\nThe Biolog Ecoplates utilize tetrazolium reduction to measure the metabolic response of bacterial cells to different carbon substrates. Oxidized tetrazolium salt is water soluble, colorless in solution, and can freely diffuse into bacterial cells. Once inside the cell, tetrazolium is reduced by reducing agents like NADH an NADPH which are generated via cellular metabolism and catabolism. Once reduced tetrazolium is transformed into pink product. This assay measures the accumulation of reduced tetrazolium (colormetric absorbance at 590 nm) and hence the accumulation and concentration of reducing agents from cellular metabolism. This process will reflect both the concentration of cells in solution and per-capita concentration of reductant from central metabolism. There is a useful overview of the Tetrazolium colorometric procedure available here.\n\n\n3 Read data\n\n\nShow/hide code\n##### Growth summary data (e.g., AUC and growth rates from )\nmany_auc_res &lt;- readr::read_tsv(here::here(data, \"ecoplate_gcurve_auc_results.tsv\"))\nmany_spline_res &lt;- readr::read_tsv(here::here(data, \"ecoplate_gcurve_spline_results.tsv\"))\n\n##### Full growth curves\ngcurves &lt;- readr::read_tsv(here::here(data, \"ecoplate_gcurves_smooth.tsv\")) %&gt;% \n  arrange(strainID, well, plate_name) %&gt;% \n  group_by(strainID, evolution, plate_name, `carbon source`, well) %&gt;% \n  mutate(id = dplyr::cur_group_id()) %&gt;% \n  group_by(strainID, evolution, `carbon source`) %&gt;% \n  mutate(replicate = case_when(id == min(id) ~ 1,\n                               id == max(id) ~ n_distinct(id),\n                               TRUE ~ 2)) %&gt;% \n  mutate(replicate = LETTERS[replicate]) %&gt;% \n  dplyr::select(-id) %&gt;% \n  ungroup() \n\n\n\n\n4 Plot growth curves\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Full growth curves of Citrobacter koseri HAMBI_1287 on 31 different carbon substrates and water in Biolog Ecoplates over 48 hours of growth. Metabolic activity via tetrazolium reduction is colorometrically tracked with absorbance at 590 nm. Line type denotes the biological replicate, while line color denotes adaptation to the antibiotic streptomycin: Streptomycin resistant (red) Streptomycin sensitive (blue).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Growth of Pseudomonas chlororaphis HAMBI_1977 on 31 different carbon substrates and water in Biolog Ecoplates over 48 hours of growth. Metabolic activity via tetrazolium reduction is colorometrically tracked with absorbance at 590 nm. Line type denotes the biological replicate, while line color denotes adaptation to the antibiotic streptomycin: Streptomycin resistant (red) Streptomycin sensitive (blue).\n\n\n\n\n\n5 Plot maximum absorbance\n\n\nShow/hide code\n# 1. for each replicate take the mean over all measurements within 0.05 units of the max\n# 2. subtract water from all values\n# 3. calculate mean and bootstrapped 95% CI across biological replicates\ngcurves_metabolic_pref &lt;- gcurves %&gt;% \n  mutate(strainID2 = paste0(toupper(evolution), \"_\", strain)) %&gt;%\n  filter(hours &gt; 24) %&gt;% \n  group_by(strainID2, `carbon source`, replicate) %&gt;% \n  filter(OD600 &gt;= max(OD600)-0.05) %&gt;% \n  summarize(OD600 = mean(OD600)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = `carbon source`, values_from = \"OD600\") %&gt;% \n  pivot_longer(cols = c(-strainID2, -replicate, -water), names_to = \"carbon_source\", values_to = \"OD600\") %&gt;% \n  mutate(OD600_norm = if_else((OD600 - water) &lt; 0, 0, OD600-water)) %&gt;% \n  summarize(ggplot2::mean_cl_boot(OD600), .by=c(strainID2, carbon_source)) %&gt;% \n  mutate(y_e = errors::set_errors(y, ymax-y)) %&gt;% \n  group_by(strainID2) %&gt;% \n  mutate(y_e_r = y_e/max(y_e)) %&gt;% \n  ungroup()\n\n# Order of carbon compounds from highest metabolic output to lowest\ncarbon_order_1287 &lt;- gcurves_metabolic_pref %&gt;% \n  filter(strainID2 == \"ANC_1287\") %&gt;% \n  arrange(y_e_r) %&gt;% \n  pull(carbon_source)\n\ncarbon_order_1977 &lt;- gcurves_metabolic_pref %&gt;% \n  filter(strainID2 == \"ANC_1977\") %&gt;% \n  arrange(y_e_r) %&gt;% \n  pull(carbon_source)\n\n# plot\np1287 &lt;- gcurves_metabolic_pref %&gt;% \n  filter(str_detect(strainID2, \"1287\")) %&gt;% \n  mutate(hist = if_else(str_detect(strainID2, \"ANC\"), \"Str Sens.\", \"Str Res.\")) %&gt;% \n  mutate(carbon_source = factor(carbon_source, levels = carbon_order_1287)) %&gt;% \n  ggplot(aes(y = carbon_source, x = y_e, color = hist)) + \n  geom_errors() +\n  geom_point(size = 3) + \n  labs(y = \"Carbon source ranked by metabolic output\", \n       x = \"Metabolic performance (absorbance units, λ = 590 nm)\",\n       color = \"\", title = \"Citrobacter koseri 1287\")\n\np1977 &lt;- gcurves_metabolic_pref %&gt;% \n  filter(str_detect(strainID2, \"1977\")) %&gt;% \n  mutate(hist = if_else(str_detect(strainID2, \"ANC\"), \"Str Sens.\", \"Str Res.\")) %&gt;% \n  mutate(carbon_source = factor(carbon_source, levels = carbon_order_1977)) %&gt;% \n  ggplot(aes(y = carbon_source, x = y_e, color = hist)) + \n  geom_errors() +\n  geom_point(size = 3) + \n  labs(y = \"Carbon source ranked by metabolic output\", \n       x = \"Metabolic performance (absorbance units, λ = 590 nm)\",\n       color = \"\", title = \"Pseudomonas chlororaphis 1977\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Mean maximum metabolic performance of Citrobacter koseri 1287 grown 31 carbon substrates over 48 hours. Horizontal axis depicts the maximum absorbance (AU, 590 nm) reached over 48 hours. Point represents the mean over three biological replicates while the line range depicts the 95% confidence interval. Carbon sources are displayed on the vertical axis and organized by decreasing maximum metabolic output of the ancestral, Streptomycin-sensitive strain. Point/line color depicts whether the strain is Streptomycin resistant/evolved (red) or Streptomycin sensitive/ancestral (blue).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Mean maximum metabolic performance of Pseudomonas chlororaphis 1977 grown 31 carbon substrates over 48 hours. Horizontal axis depicts the maximum absorbance (AU, 590 nm) reached over 48 hours. Point represents the mean over three biological replicates while the line range depicts the 95% confidence interval. Carbon sources are displayed on the vertical axis and organized by decreasing maximum metabolic output of the ancestral Streptomycin sensitive strain. Point/line color depicts whether the strain is Streptomycin resistant/evolved (red) or Streptomycin sensitive/ancestral (blue).",
    "crumbs": [
      "1. Biolog ecoplates",
      "ii) Plotting and analyzing growth on different carbon substrates"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html",
    "href": "R/coculture_plates/02_plot_analyze_growth.html",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_gcurves.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"coculture_plate\")\ndata &lt;- here::here(\"data\", \"coculture_plate\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)\n\n\n\n\n\n\n\nShow/hide code\ngcurves &lt;- readr::read_tsv(here::here(data, \"coculture_gcurves_smooth.tsv\"))",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html#libraries",
    "href": "R/coculture_plates/02_plot_analyze_growth.html#libraries",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "",
    "text": "Show/hide code\nlibrary(tidyverse)\nlibrary(here)\nlibrary(fs)\nlibrary(scales)\nsource(here::here(\"R\", \"utils_gcurves.R\"))",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html#global-variables",
    "href": "R/coculture_plates/02_plot_analyze_growth.html#global-variables",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"coculture_plate\")\ndata &lt;- here::here(\"data\", \"coculture_plate\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html#read-growth-summary-data",
    "href": "R/coculture_plates/02_plot_analyze_growth.html#read-growth-summary-data",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "",
    "text": "Show/hide code\ngcurves &lt;- readr::read_tsv(here::here(data, \"coculture_gcurves_smooth.tsv\"))",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html#difusion-test",
    "href": "R/coculture_plates/02_plot_analyze_growth.html#difusion-test",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "2.1 Difusion test",
    "text": "2.1 Difusion test\nPlot the co-cultures growing on M9 compared to the control (column 1 and 3)\n\nShow/hide code\ngcurves %&gt;% \n  filter(str_detect(culture_type, \"double_media|diffusion\")) %&gt;% \n  filter(str_detect(strain, \"NANA\", negate=TRUE)) %&gt;% \n  ggplot() + \n  ggplot2::geom_line(aes(x = hours, y = OD600_rollmean, lty = replicate, color = culture_type, group = interaction(well, plate_name))) +\n  ggplot2::labs(x = \"Hours\", y = \"OD600\") +\n  ggplot2::scale_x_continuous(breaks = seq(0, 48, 12), labels = seq(0, 48, 12)) +\n  labs(y = \"Optical density (600 nm)\", x = \"Hours\", title = \"Diffusion test\") +\n  facet_grid(evolution~strain)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Growth curves (OD600 over 48 hours) in monoculture for three replicates (line type) of each species (plot panel columns) and evolution status (plot panel rows). Line color indicates experimental conditions: Blue = “Double Media” which is standard inoculation into R2A growth medium with an adjacent well also containing R2A growth medium but with no inoculum. Green = diffusion test where bacteria are inoculated into M9 salts adjacent to a well containing R2A growth medium but with no inoculum. Red = diffusion test where bacteria are inoculated into R2A medium adjacent to a well containing M9 salts but with no inoculum. On the plate, column \\(n=\\{1\\dots11\\}\\) is connected to column \\(n+1\\) with a 0.22 um membrane allowing free diffusion of resources and metabolic byproducts but not cells. These experiments were all conducted with no Streptomycin. Strain naming convention: 1287 = Citrobacter koserii 1287, 1977 = Psuedomonas chlororaphis 1977, A = Ancestral/Streptomycin sensitive, E = Evolved/Streptomycin resistant.",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "R/coculture_plates/02_plot_analyze_growth.html#competition",
    "href": "R/coculture_plates/02_plot_analyze_growth.html#competition",
    "title": "Analyzing growth in pairs and monoculture",
    "section": "2.2 Competition",
    "text": "2.2 Competition\n\n\nShow/hide code\nplot_competing_pair &lt;- function(df, competition_pair){\n  strainpairs &lt;- stringr::str_split(competition_pair, \"_\")[[1]]\n  straincols &lt;- c(\"A1287\" = \"orange\", \"E1287\" = \"purple\", \"A1977\" = \"dodgerblue\", \"E1977\" = \"limegreen\")\n  \n  mc &lt;- df %&gt;%\n    mutate(strainID = paste0(stringr::str_to_upper(stringr::str_sub(evolution, start = 1, end=1)), str_extract(strain, \"\\\\d+\"))) %&gt;% \n    dplyr::filter(str_detect(culture_type, \"double_media\", negate=FALSE)) %&gt;% \n    dplyr::filter(strainID %in% strainpairs) %&gt;% \n    dplyr::mutate(strep_conc = 0)\n  \n  cc &lt;- df %&gt;%\n    mutate(strainID = paste0(stringr::str_to_upper(stringr::str_sub(evolution, start = 1, end=1)), str_extract(strain, \"\\\\d+\"))) %&gt;% \n    dplyr::filter(str_detect(culture_type, \"coculture\", negate=FALSE)) %&gt;% \n    dplyr::filter(competition_pair == {{ competition_pair }})\n  \n  bind_rows(mc, cc) %&gt;% \n    ggplot2::ggplot() + \n    ggplot2::geom_line(aes(x = hours, y = OD600_rollmean, color = strainID, lty = replicate, group = interaction(well, plate_name))) +\n    ggplot2::labs(x = \"Hours\", y = \"OD600\") +\n    ggplot2::scale_x_continuous(breaks = seq(0, 48, 12), labels = seq(0, 48, 12)) +\n    ggplot2::labs(y = \"Optical density (600 nm)\", x = \"Hours\", title = paste(strainpairs, collapse=\" + \")) +\n    ggplot2::scale_color_manual(values = straincols) +\n    ggplot2::facet_grid(strep_conc~culture_type)\n}\n\n\n\n\nShow/hide code\npairplots &lt;- map(c(\"A1287_E1287\", \"A1287_E1977\", \"E1287_E1977\",\n      \"A1287_A1977\", \"E1287_A1977\", \"A1977_E1977\"), ~plot_competing_pair(gcurves, .x))\n\n\n\nShow/hide code\npairplots[[1]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Growth curves (OD600 over 48 hours) for six replicates (line type) of two strains in a competing pair (denoted by color and plot title). Plot panel columns depict the pair in adjacent connected wells (coculture, competing over a single pooled growth medium) or each strain in monoculture when it is grown adjacent to an well with 100% growth medium but without inoculum. Plot panel rows depict growth in different streptomycin concentrations (ug/ml). Strain naming convention: 1287 = Citrobacter koserii 1287, 1977 = Psuedomonas chlororaphis 1977, A = Ancestral/Streptomycin sensitive, E = Evolved/Streptomycin resistant.\n\n\n\n\nShow/hide code\npairplots[[2]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: As in Figure 2 but for 1287A and 1977E.\n\n\n\n\nShow/hide code\npairplots[[3]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: As in Figure 2 but for 1287E and 1977E.\n\n\n\n\nShow/hide code\npairplots[[4]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: As in Figure 2 but for 1287A and 1977A.\n\n\n\n\nShow/hide code\npairplots[[5]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: As in Figure 2 but for 1287E and 1977A.\n\n\n\n\nShow/hide code\npairplots[[6]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: As in Figure 2 but for 1977A and 1977E.",
    "crumbs": [
      "2. Competition using co-culture plates",
      "ii) Plotting curves from competition exps"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "",
    "text": "TBD\n\n\n\nTBD"
  },
  {
    "objectID": "index.html#manuscript",
    "href": "index.html#manuscript",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "",
    "text": "TBD\n\n\n\nTBD"
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "2 Introduction",
    "text": "2 Introduction\nThe goal of this project is to examine how …"
  },
  {
    "objectID": "index.html#experiment-overview",
    "href": "index.html#experiment-overview",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "3 Experiment overview",
    "text": "3 Experiment overview\nThis is how we did our experiment…"
  },
  {
    "objectID": "index.html#analysis-overview",
    "href": "index.html#analysis-overview",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "4 Analysis overview",
    "text": "4 Analysis overview\nThis is how we did our data analysis…"
  },
  {
    "objectID": "index.html#availability",
    "href": "index.html#availability",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "5 Availability",
    "text": "5 Availability\nData and code in this GitHub repository (https://github.com/slhogle/MCTdownUnder) are provided under GNU AGPL3. The rendered project site is available at https://slhogle.github.io/MCTdownUnder/, which has been produced using Quarto notebooks. The content on the rendered site is released under the CC BY 4.0. This repository hosts all code and data for this project, including the code necessary to fully recreate the rendered webpage.\nAn archived release of the code is available from Zenodo: https://zenodo.org/records/EVENTUAL_ZENODO_RECORD"
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "Data analysis for the project MCTdownUnder",
    "section": "6 Reproducibility",
    "text": "6 Reproducibility\nThe project uses renv to create a reproducible environment to execute the code in this project. See here for a brief overview on collaboration and reproduction of the entire project. To get up and running from an established repository, you could do:\ninstall.packages(\"renv\")\nrenv::restore()\nTo initiate renv for a new project:\ninstall.packages(\"renv\")\n# initialize\nrenv::init()\n# install some new packages\nrenv::install(\"tidyverse\")\n# record those packages in the lockfile\nrenv::snapshot()"
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(ggforce)\nlibrary(slider)\nsource(here::here(\"R\", \"utils_gcurves.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"coculture_plate\")\ndata &lt;- here::here(\"data\", \"coculture_plate\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#libraries",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#libraries",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(ggforce)\nlibrary(slider)\nsource(here::here(\"R\", \"utils_gcurves.R\"))",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#global-variables",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#global-variables",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"coculture_plate\")\ndata &lt;- here::here(\"data\", \"coculture_plate\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#read-growth-curves",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#read-growth-curves",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "2.1 Read growth curves",
    "text": "2.1 Read growth curves\n\n\nShow/hide code\n# plate reading function\nread_logphase_xlsx &lt;- function(subdir, filename, sheet, skip){\n  readxl::read_xlsx(here::here(data_raw, subdir, filename), sheet = sheet, skip = skip) %&gt;% \n  # set interval start to be first cell and make all intervals relative to that\n  # use time_length to just create an hours variable of type numeric\n  mutate(seconds = lubridate::time_length(lubridate::interval(Time[1], Time), unit = \"second\")) %&gt;% \n  tidyr::pivot_longer(c(-seconds, -Time), names_to = \"well\", values_to = \"OD600\") %&gt;%\n  mutate(hours = lubridate::time_length(seconds, unit = \"hours\")) %&gt;% \n  # converting the well format so it matches the samplesheet\n  mutate(well = paste0(str_extract(well, \"^[A-H]\"), str_pad(str_extract(well, \"\\\\d+\"), \n                                                            width = 2, pad = \"0\", side = \"left\"))) %&gt;% \n  dplyr::select(seconds, hours, well, OD600) %&gt;% \n  mutate(OD600 = as.numeric(OD600))\n}",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#read-sample-metadata",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#read-sample-metadata",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "2.2 Read sample metadata",
    "text": "2.2 Read sample metadata\n\n\nShow/hide code\nsamplesheet_diff_test &lt;- readxl::read_xlsx(here::here(data_raw, \"20250920_v2\", \"diffusion_test_2_samplesheet.xlsx\"))\nsamplesheet_coculture &lt;- readxl::read_xlsx(here::here(data_raw, \"20250920_v2\", \"coculture_samplesheet.xlsx\"))\n\n\n\n\nShow/hide code\n# Diffusion test plate\ndiff_test &lt;- read_logphase_xlsx(\"20250920_v2\", \"diffusion_test_2_Co-culture_1977_1287AE_12.9_15-syys-2025 09-00-26.xlsx\", 2, 1) %&gt;% \n  # remove rows A and H\n  filter(str_detect(well, \"^A|^H\", negate = TRUE)) %&gt;% \n  left_join(samplesheet_diff_test, by = join_by(well)) %&gt;% \n  mutate(plate_name = \"diffusion_test\")\n\n# Experiment plate 0 ug/ml streptomycin\nstrep_00 &lt;- read_logphase_xlsx(\"20250920_v2\", \"Co-culture_0_4_8ug_plates_22-syys-2025 08-17-10.xlsx\", 2, 1) %&gt;% \n  # rows A and H not collected here so they are NA\n  drop_na() %&gt;% \n  left_join(samplesheet_coculture, by = join_by(well)) %&gt;% \n  mutate(strep_conc = 0) %&gt;% \n  mutate(plate_name = \"str_00\")\n\n# Experiment plate 4 ug/ml streptomycin\nstrep_04 &lt;- read_logphase_xlsx(\"20250920_v2\", \"Co-culture_0_4_8ug_plates_22-syys-2025 08-17-10.xlsx\", 5, 1) %&gt;% \n  # rows A and H not collected here so they are NA\n  drop_na() %&gt;% \n  left_join(samplesheet_coculture, by = join_by(well)) %&gt;% \n  mutate(strep_conc = 4) %&gt;% \n  mutate(plate_name = \"str_04\")\n\n# Experiment plate 8 ug/ml streptomycin\nstrep_08 &lt;- read_logphase_xlsx(\"20250920_v2\", \"Co-culture_0_4_8ug_plates_22-syys-2025 08-17-10.xlsx\", 8, 1) %&gt;% \n  # rows A and H not collected here so they are NA\n  drop_na() %&gt;% \n  left_join(samplesheet_coculture, by = join_by(well)) %&gt;% \n  mutate(strep_conc = 8) %&gt;% \n  mutate(plate_name = \"str_08\")\n\n\n\n\nShow/hide code\n# combine all samples, group by plate + well, calculate rolling mean\ncoculture_gcurves_sm &lt;- bind_rows(diff_test, strep_00, strep_04, strep_08) %&gt;% \n  dplyr::group_by(plate_name, well) %&gt;% \n  arrange(plate_name, well) %&gt;% \n  dplyr::mutate(OD600_rollmean = slider::slide_dbl(OD600, mean, .before = 2, .after = 2)) %&gt;% \n  ungroup() %&gt;% \n  relocate(OD600_rollmean, .after = \"OD600\")\n\nreadr::write_tsv(coculture_gcurves_sm, here::here(data, \"coculture_gcurves_smooth.tsv\"))",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#plate01-diffusion-test",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#plate01-diffusion-test",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "3.1 plate01 (diffusion test)",
    "text": "3.1 plate01 (diffusion test)\nThis plate contains three replicates for the ancestral form of HAMBI_1287\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Growth curves for the “diffusion test” coculture plate. Columns 1, 3, 5, and 7 have only M9 salts. Columns 2, 4, 6, 8, 9, 10, 11, and 12 had R2A medium. Column \\(n=\\{1\\dots11\\}\\) is connected to column \\(n+1\\) with a 0.22 um membrane allowing free diffusion of resources and metabolic byproducts but not cells. Bacteria were inoculated into rows B-D, columns 1, 3, 5, and 7 and rows E-F columsn 2, 4, 6, and 8. Columns 9 and 11 were not inoculated with any bacteria. X-axis is time in hours (48 hour incubation). Y axis is the absorbance scaled for each well. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed. Note that rows A and H are meaningless because of the construction of the plate. Note: rows A and H are blank.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Growth curves for the coculture plate with no streptomycin. Column \\(n=\\{1\\dots11\\}\\) is connected to column \\(n+1\\) with a 0.22 um membrane allowing free diffusion of resources and metabolic byproducts but not cells. X-axis is time in hours (48 hour incubation). Y axis is the absorbance scaled for each well. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed. Note that rows A and H are meaningless because of the construction of the plate. Note: rows A and H are blank.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Growth curves for the coculture plate with 4 ug/ml streptomycin. Column \\(n=\\{1\\dots11\\}\\) is connected to column \\(n+1\\) with a 0.22 um membrane allowing free diffusion of resources and metabolic byproducts but not cells. X-axis is time in hours (48 hour incubation). Y axis is the absorbance scaled for each well. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed. Note that rows A and H are meaningless because of the construction of the plate. Note: rows A and H are blank.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Growth curves for the coculture plate with 8 ug/ml streptomycin. Column \\(n=\\{1\\dots11\\}\\) is connected to column \\(n+1\\) with a 0.22 um membrane allowing free diffusion of resources and metabolic byproducts but not cells. X-axis is time in hours (48 hour incubation). Y axis is the absorbance scaled for each well. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed. Note that rows A and H are meaningless because of the construction of the plate. Note: rows A and H are blank.",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#spline-based-estiamte",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#spline-based-estiamte",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "4.1 Spline based estiamte",
    "text": "4.1 Spline based estiamte\nSmoothing splines are a quick method to estimate maximum growth. The method is called nonparametric, because the growth rate is directly estimated from the smoothed data without being restricted to a specific model formula.\nFrom growthrates documentation:\n\nThe method was inspired by an algorithm of Kahm et al. (2010), with different settings and assumptions. In the moment, spline fitting is always done with log-transformed data, assuming exponential growth at the time point of the maximum of the first derivative of the spline fit. All the hard work is done by function smooth.spline from package stats, that is highly user configurable. Normally, smoothness is automatically determined via cross-validation. This works well in many cases, whereas manual adjustment is required otherwise, e.g. by setting spar to a fixed value [0, 1] that also disables cross-validation.\n\n\n4.1.1 Fit\n\n\nShow/hide code\nset.seed(45278)\nmany_spline &lt;- growthrates::all_splines(OD600_rollmean ~ hours | id, data = coculture_gcurves_sm, spar = 0.5)\n\nreadr::write_rds(many_spline, here::here(data, \"coculture_spline_fits\"))\n\n\n\n\n4.1.2 Results\n\n\nShow/hide code\nmany_spline_res &lt;- growthrates::results(many_spline)\n\n\n\n\n4.1.3 Predictions\n\n\nShow/hide code\nmany_spline_xy &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x = x@xy[1], y = x@xy[2])) %&gt;% \n  purrr::list_rbind(names_to = \"id\") \n\nmany_spline_fitted &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(coculture_gcurves_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::group_by(id) %&gt;% \n  # this step makes sure we don't plot fits that go outside the range of the data\n  dplyr::mutate(predicted = dplyr::if_else(dplyr::between(predicted, min(OD600_rollmean), max(OD600_rollmean)), predicted, NA_real_)) %&gt;% \n  dplyr::ungroup()\n\n\n\n\n4.1.4 Plot\n\n4.1.4.1 Plate01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: As in Figure 1. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: As in Figure 2. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: As in Figure 3. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: As in Figure 4. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/coculture_plates/01_format_growthcurves_batch.html#auc",
    "href": "R/coculture_plates/01_format_growthcurves_batch.html#auc",
    "title": "Formatting co-culture growth curves from Logphase 600 Plate reader",
    "section": "4.2 AUC",
    "text": "4.2 AUC\nCalculates AUC using DescTools package\n\n\nShow/hide code\nmany_auc_res &lt;- coculture_gcurves_sm %&gt;% \n  dplyr::summarize(auc = DescTools::AUC(hours, OD600_rollmean),\n            max_od = max(OD600_rollmean),\n            min_od = min(OD600_rollmean),\n            .by = id) %&gt;% \n  dplyr::left_join(dplyr::distinct(dplyr::select(coculture_gcurves_sm, strain:id)), by = join_by(id)) %&gt;% \n  dplyr::select(-id)",
    "crumbs": [
      "2. Competition using co-culture plates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html",
    "title": "Formatting growth curves from Synergy H1",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(ggforce)\nlibrary(slider)\nsource(here::here(\"R\", \"utils_gcurves.R\"))\n\n\n\n\n\n\n\nShow/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"biolog_ecoplates\")\ndata &lt;- here::here(\"data\", \"biolog_ecoplates\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#libraries",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#libraries",
    "title": "Formatting growth curves from Synergy H1",
    "section": "",
    "text": "Show/hide code\nlibrary(here)\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(fs)\nlibrary(ggforce)\nlibrary(slider)\nsource(here::here(\"R\", \"utils_gcurves.R\"))",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#global-variables",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#global-variables",
    "title": "Formatting growth curves from Synergy H1",
    "section": "",
    "text": "Show/hide code\ndata_raw &lt;- here::here(\"_data_raw\", \"biolog_ecoplates\")\ndata &lt;- here::here(\"data\", \"biolog_ecoplates\")\n\n# make processed data directory if it doesn't exist\nfs::dir_create(data)",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#read-growth-curves",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#read-growth-curves",
    "title": "Formatting growth curves from Synergy H1",
    "section": "2.1 Read growth curves",
    "text": "2.1 Read growth curves\n\n\nShow/hide code\nplate01 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1287A\", \"1287A_raw_data.xlsx\"), sheet = 3, skip = 1) %&gt;% \n  # set interval start to be first cell and make all intervals relative to that\n  # use time_length to just create an hours variable of type numeric\n  mutate(seconds = lubridate::time_length(lubridate::interval(Time[1], Time), unit = \"second\")) %&gt;% \n  tidyr::pivot_longer(c(-seconds, -Time), names_to = \"well\", values_to = \"OD600\") %&gt;%\n  mutate(hours = lubridate::time_length(seconds, unit = \"hours\")) %&gt;% \n  # converting the well format so it matches the samplesheet\n  mutate(well = paste0(str_extract(well, \"^[A-H]\"), str_pad(str_extract(well, \"\\\\d+\"), width = 2, pad = \"0\", side = \"left\"))) %&gt;% \n  dplyr::select(seconds, hours, well, OD600) %&gt;% \n  # create a plate variable for later combining\n  mutate(plate_name = \"plate01\")\n\nplate02 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1287E_1977A\", \"1287E_1977A_rawdata.xlsx\"), sheet = 3, skip = 1) %&gt;% \n  # set interval start to be first cell and make all intervals relative to that\n  # use time_length to just create an hours variable of type numeric\n  mutate(seconds = lubridate::time_length(lubridate::interval(Time[1], Time), unit = \"second\")) %&gt;% \n  tidyr::pivot_longer(c(-seconds, -Time), names_to = \"well\", values_to = \"OD600\") %&gt;%\n  mutate(hours = lubridate::time_length(seconds, unit = \"hours\")) %&gt;% \n  # converting the well format so it matches the samplesheet\n  mutate(well = paste0(str_extract(well, \"^[A-H]\"), str_pad(str_extract(well, \"\\\\d+\"), width = 2, pad = \"0\", side = \"left\"))) %&gt;% \n  dplyr::select(seconds, hours, well, OD600) %&gt;% \n  # create a plate variable for later combining\n  mutate(plate_name = \"plate02\")\n\nplate03 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1977A_1977E\", \"1977A_1977E_rawdata.xlsx\"), sheet = 3, skip = 1) %&gt;% \n  # set interval start to be first cell and make all intervals relative to that\n  # use time_length to just create an hours variable of type numeric\n  mutate(seconds = lubridate::time_length(lubridate::interval(Time[1], Time), unit = \"second\")) %&gt;% \n  tidyr::pivot_longer(c(-seconds, -Time), names_to = \"well\", values_to = \"OD600\") %&gt;%\n  mutate(hours = lubridate::time_length(seconds, unit = \"hours\")) %&gt;% \n  # converting the well format so it matches the samplesheet\n  mutate(well = paste0(str_extract(well, \"^[A-H]\"), str_pad(str_extract(well, \"\\\\d+\"), width = 2, pad = \"0\", side = \"left\"))) %&gt;% \n  dplyr::select(seconds, hours, well, OD600) %&gt;% \n  # create a plate variable for later combining\n  mutate(plate_name = \"plate03\")",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#read-sample-metadata",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#read-sample-metadata",
    "title": "Formatting growth curves from Synergy H1",
    "section": "3.1 Read sample metadata",
    "text": "3.1 Read sample metadata\n\n\nShow/hide code\nsamplesheet01 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1287A\", \"samplesheet_1287A.xlsx\")) %&gt;% \n  mutate(strainID = paste0(\"HAMBI_\", strain)) %&gt;% \n  mutate(plate_name = \"plate01\")\nsamplesheet02 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1287E_1977A\", \"samplesheet_1287E_1977A.xlsx\")) %&gt;% \n  mutate(strainID = paste0(\"HAMBI_\", strain)) %&gt;% \n  mutate(plate_name = \"plate02\")\nsamplesheet03 &lt;- readxl::read_xlsx(here::here(data_raw, \"biolog_ecoplate_1977A_1977E\", \"samplesheet_1977A_1977E.xlsx\")) %&gt;% \n  mutate(strainID = paste0(\"HAMBI_\", strain)) %&gt;% \n  mutate(plate_name = \"plate03\")",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#join-with-metadata-to-remove-ununsed-samples",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#join-with-metadata-to-remove-ununsed-samples",
    "title": "Formatting growth curves from Synergy H1",
    "section": "3.2 Join with metadata to remove ununsed samples",
    "text": "3.2 Join with metadata to remove ununsed samples\n\n\nShow/hide code\necoplate_gcurves_sm &lt;- bind_rows(plate01, plate02, plate03) %&gt;% \n  left_join(bind_rows(samplesheet01, samplesheet02, samplesheet03), by = join_by(well, plate_name)) %&gt;% \n  dplyr::group_by(plate_name, well) %&gt;% \n  dplyr::mutate(OD600_rollmean = slider::slide_dbl(OD600, mean, .before = 2, .after = 2)) %&gt;% \n  ungroup() %&gt;% \n  relocate(OD600_rollmean, .after = \"OD600\")\n\nreadr::write_tsv(ecoplate_gcurves_sm, here::here(data, \"ecoplate_gcurves_smooth.tsv\"))",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#plate01-ancestral-hambi_1287-anc",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#plate01-ancestral-hambi_1287-anc",
    "title": "Formatting growth curves from Synergy H1",
    "section": "4.1 plate01 (Ancestral HAMBI_1287 ANC)",
    "text": "4.1 plate01 (Ancestral HAMBI_1287 ANC)\nThis plate contains three replicates for the ancestral form of HAMBI_1287\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Growth curves for the first ecolog plate with the ancestral form of HAMBI_1287. X-axis is time in hours (48 hour incubation). Y axis is the absorbance scaled for each well. Blue line is smoothed with a moving average window of 9 points. Orange is non-smoothed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: As in Figure 1 but for EVO_1287 (columns 1-8) and ANC_1977 (columns 9-12)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: As in Figure 1 but for ANC_1977 (columns 1-4) and EVO_1977 (columns 5-12)",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#conclusions",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#conclusions",
    "title": "Formatting growth curves from Synergy H1",
    "section": "4.2 Conclusions",
    "text": "4.2 Conclusions\nGrowth curves all look mostly reasonable. For just a couple of the carbon substrates there are some strange features (e.g., L-asparagine for HAMBI_1977). Can proceed with the analysis.",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#spline-based-estiamte",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#spline-based-estiamte",
    "title": "Formatting growth curves from Synergy H1",
    "section": "5.1 Spline based estiamte",
    "text": "5.1 Spline based estiamte\nSmoothing splines are a quick method to estimate maximum growth. The method is called nonparametric, because the growth rate is directly estimated from the smoothed data without being restricted to a specific model formula.\nFrom growthrates documentation:\n\nThe method was inspired by an algorithm of Kahm et al. (2010), with different settings and assumptions. In the moment, spline fitting is always done with log-transformed data, assuming exponential growth at the time point of the maximum of the first derivative of the spline fit. All the hard work is done by function smooth.spline from package stats, that is highly user configurable. Normally, smoothness is automatically determined via cross-validation. This works well in many cases, whereas manual adjustment is required otherwise, e.g. by setting spar to a fixed value [0, 1] that also disables cross-validation.\n\n\n5.1.1 Fit\n\n\nShow/hide code\nset.seed(45278)\nmany_spline &lt;- growthrates::all_splines(OD600_rollmean ~ hours | id, data = ecoplate_gcurves_sm, spar = 0.5)\n\nreadr::write_rds(many_spline, here::here(data, \"spline_fits\"))\n\n\n\n\n5.1.2 Results\n\n\nShow/hide code\nmany_spline_res &lt;- growthrates::results(many_spline)\n\n\n\n\n5.1.3 Predictions\n\n\nShow/hide code\nmany_spline_xy &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x = x@xy[1], y = x@xy[2])) %&gt;% \n  purrr::list_rbind(names_to = \"id\") \n\nmany_spline_fitted &lt;- purrr::map(many_spline@fits, \\(x) data.frame(x@FUN(x@obs$time, x@par))) %&gt;% \n  purrr::list_rbind(names_to = \"id\") %&gt;% \n  dplyr::rename(hours = time, predicted = y) %&gt;% \n  dplyr::left_join(ecoplate_gcurves_sm, by = dplyr::join_by(id, hours)) %&gt;% \n  dplyr::group_by(id) %&gt;% \n  # this step makes sure we don't plot fits that go outside the range of the data\n  dplyr::mutate(predicted = dplyr::if_else(dplyr::between(predicted, min(OD600_rollmean), max(OD600_rollmean)), predicted, NA_real_)) %&gt;% \n  dplyr::ungroup()\n\n\n\n\n5.1.4 Plot\n\n5.1.4.1 Plate01 (ANC_1287)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: As in Figure 1. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n5.1.4.2 Plate02 (EVO_1287 and ANC_1977)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: As in Figure 2. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.\n\n\n\n\n\n5.1.4.3 Plate03 (ANC_1977 and EVO_1977)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: As in Figure 3. Blue line is smoothed with a moving average window of 5 points. Orange is slope of max predicted growth rate from the first derivative of a smoothing spline. Red dot is hours and OD600 at which maximum growth rate is reached.",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  },
  {
    "objectID": "R/biolog_ecoplates/01_format_growthcurves_batch.html#auc",
    "href": "R/biolog_ecoplates/01_format_growthcurves_batch.html#auc",
    "title": "Formatting growth curves from Synergy H1",
    "section": "5.2 AUC",
    "text": "5.2 AUC\nCalculates AUC using DescTools package\n\n\nShow/hide code\nmany_auc_res &lt;- ecoplate_gcurves_sm %&gt;% \n  dplyr::summarize(auc = DescTools::AUC(hours, OD600_rollmean),\n            max_od = max(OD600_rollmean),\n            min_od = min(OD600_rollmean),\n            .by = id) %&gt;% \n  dplyr::left_join(dplyr::distinct(dplyr::select(ecoplate_gcurves_sm, plate_name:id)), by = join_by(id)) %&gt;% \n  dplyr::select(-id) %&gt;% \n  dplyr::relocate(auc, max_od, min_od, .after=\"strainID\")",
    "crumbs": [
      "1. Biolog ecoplates",
      "i) Reading and formatting data from plate reader"
    ]
  }
]